name: Build and Test
on: [push]
jobs:
  generate-pac:
    name: Generate PAC
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: pip install svdtools

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi
          components: rustfmt
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: svd2rust
          version: "^0.33.1"
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: form
          version: "^0.10.0"
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-make
          # fix for invalid Cargo.toml
          # https://github.com/sagiegurari/cargo-make/commit/3a699b83326f8c26d57453f797d799dad9ab78bb
          version: "^0.37.12"

      - run: cargo make
        working-directory: dp32g030

      - uses: actions/upload-artifact@v4
        with:
          name: generated-pac.zip
          path: |
            dp32g030/svd/dp32g030.vendor.svd.patched
            dp32g030/svd/memorymap.txt
            dp32g030/build.rs
            dp32g030/device.x
            dp32g030/src
      - uses: actions/upload-artifact@v4
        with:
          name: memorymap.txt
          path: dp32g030/svd/memorymap.txt

  hal-flash:
    name: HAL (Flash)
    runs-on: ubuntu-latest
    needs: generate-pac
    strategy:
      matrix:
        features: ["", "defmt"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi
          components: llvm-tools
      - uses: actions/download-artifact@v4
        with:
          name: generated-pac.zip
          path: dp32g030

      - run: cargo build --no-default-features --features "intern-compile" --bins --release
        working-directory: dp32g030-hal-flash
      - run: cargo build --no-default-features --features "${{ matrix.features }}"
        working-directory: dp32g030-hal-flash

  hal:
    name: HAL
    runs-on: ubuntu-latest
    needs: generate-pac
    strategy:
      matrix:
        features: ["", "defmt"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi
      - uses: actions/download-artifact@v4
        with:
          name: generated-pac.zip
          path: dp32g030

      - run: cargo build --no-default-features --features "${{ matrix.features }}"
        working-directory: dp32g030-hal

  board:
    name: Board
    runs-on: ubuntu-latest
    needs: generate-pac
    strategy:
      matrix:
        features: ["", "defmt,defmt-logger"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi
      - uses: actions/download-artifact@v4
        with:
          name: generated-pac.zip
          path: dp32g030

      - run: cargo build --no-default-features --features "${{ matrix.features }}"
        working-directory: k5board

  bk4819:
    name: bk4819
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features: ["", "defmt"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo build --no-default-features --features "${{ matrix.features }}"
        working-directory: bk4819
      - run: cargo test --no-default-features --features "${{ matrix.features }}"
        working-directory: bk4819

  examples:
    name: Examples
    runs-on: ubuntu-latest
    # silly: don't need firmware pack, just want summary text after it
    needs: [generate-pac, tool-linux, firmware-pack]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi
      - uses: actions/download-artifact@v4
        with:
          name: generated-pac.zip
          path: dp32g030

      - run: mkdir -p github-work/examples
      - uses: actions/download-artifact@v4
        with:
          name: k5tool-linux.zip
          path: github-work
      - run: chmod +x github-work/k5tool

      - run: cargo build --release --examples --all-features
        working-directory: dp32g030-hal
      - run: cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "dp32g030-hal") | .targets[] | select(.kind[] | contains("example")) | .name' | tee ../github-work/hal-examples.txt
        working-directory: dp32g030-hal
      - run: cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "dp32g030-hal") | .version' | tee ../github-work/hal-version.txt
        working-directory: dp32g030-hal

      - run: cargo build --release --examples --all-features
        working-directory: k5board
      # rebuild those that don't need all features without them, for smaller bins
      - run: cargo build --release --examples
        working-directory: k5board
      - run: cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "k5board") | .targets[] | select(.kind[] | contains("example")) | .name' | tee ../github-work/board-examples.txt
        working-directory: k5board

      - shell: bash
        working-directory: github-work
        run: |
          echo "### Example Summary" >> $GITHUB_STEP_SUMMARY
          for name in $(cat hal-examples.txt); do
            echo "#### hal-$name" >> $GITHUB_STEP_SUMMARY
            echo "~~~~" >> $GITHUB_STEP_SUMMARY
            cp "../dp32g030-hal/target/thumbv6m-none-eabi/release/examples/$name" "examples/hal-$name.elf"
            ./k5tool pack --version "*$(cat hal-version.txt)$name" "examples/hal-$name.elf" "examples/hal-$name.packed.bin" | tee -a $GITHUB_STEP_SUMMARY
            echo "~~~~" >> $GITHUB_STEP_SUMMARY
          done
          for name in $(cat board-examples.txt); do
            echo "#### k5-$name" >> $GITHUB_STEP_SUMMARY
            echo "~~~~" >> $GITHUB_STEP_SUMMARY
            cp "../k5board/target/thumbv6m-none-eabi/release/examples/$name" "examples/k5-$name.elf"
            ./k5tool pack "examples/k5-$name.elf" "examples/k5-$name.packed.bin" | tee -a $GITHUB_STEP_SUMMARY
            echo "~~~~" >> $GITHUB_STEP_SUMMARY
          done

      - uses: actions/upload-artifact@v4
        with:
          name: examples.zip
          path: github-work/examples

  firmware:
    name: Firmware
    runs-on: ubuntu-latest
    needs: generate-pac
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi
      - uses: actions/download-artifact@v4
        with:
          name: generated-pac.zip
          path: dp32g030

      - run: cargo build --release
        working-directory: k5firmware

      - uses: actions/upload-artifact@v4
        with:
          name: firmware-elf.zip
          path: k5firmware/target/thumbv6m-none-eabi/release/k5firmware

  firmware-pack:
    name: Firmware Pack
    runs-on: ubuntu-latest
    needs: [firmware, tool-linux]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: firmware-elf.zip
      - uses: actions/download-artifact@v4
        with:
          name: k5tool-linux.zip

      - run: chmod +x ./k5tool
      - run: |
          echo "### Firmware Summary" >> $GITHUB_STEP_SUMMARY
          echo "~~~~" >> $GITHUB_STEP_SUMMARY
          ./k5tool pack k5firmware k5firmware.packed.bin 2>&1 | tee -a $GITHUB_STEP_SUMMARY
          echo "~~~~" >> $GITHUB_STEP_SUMMARY

      - uses: actions/upload-artifact@v4
        with:
          name: firmware-packed.zip
          path: k5firmware.packed.bin

  lib:
    name: Tool Library
    runs-on: ubuntu-latest
    strategy:
      matrix:
        std: ["", "alloc", "std"]
        defmt: ["", ",defmt"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - run: cargo build --no-default-features --features "${{ matrix.std }}${{ matrix.defmt }}"
        working-directory: k5lib
      - run: cargo test --no-default-features --features "${{ matrix.std }}${{ matrix.defmt }}"
        working-directory: k5lib

  tool:
    name: Tool
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # not really sure what pulls this in, maybe serialport
      - run: sudo apt-get install -y libudev-dev

      - run: cargo build
        working-directory: k5tool
      - run: cargo test
        working-directory: k5tool

  tool-linux:
    name: Tool Release (linux, MUSL)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - run: cargo build --release --target=x86_64-unknown-linux-musl
        working-directory: k5tool

      - uses: actions/upload-artifact@v4
        with:
          name: k5tool-linux.zip
          path: k5tool/target/x86_64-unknown-linux-musl/release/k5tool

  tool-windows:
    name: Tool Release (windows)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - run: cargo build --release
        working-directory: k5tool

      - uses: actions/upload-artifact@v4
        with:
          name: k5tool-windows.zip
          path: k5tool/target/release/k5tool.exe
